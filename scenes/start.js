const { SCENES, STEPS } = require('../constants');
const Extra = require('telegraf/extra');
const Markup = require('telegraf/markup');
const fetch = (...args) => import('node-fetch').then(({ default: fetch }) => fetch(...args));

const startScreen = {
	[STEPS.FIRST]: async function ({ ctx, user }) {
		const isText = ctx.message.text ? true : false;
		const deeplink = isText && ctx.message.text.split(' ').length > 1 ? ctx.message.text.split(' ')[1] : false;
		// if (!user.phone && deeplink) {
		if (deeplink) {
			user.company_hash = deeplink;
			await user.save();
			ctx.reply(
				'–ú–µ–Ω—è –∑–æ–≤—É—Ç Automobot üòé\n\n–ú–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤–æ–≤—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏—Ç—å —Å–≤–æ—é –º–∞—à–∏–Ω—É. –í—Å—ë —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë –∞–≤—Ç–æ. –ü–æ–≥–Ω–∞–ª–∏? üî•',
				Extra.markup((markup) => {
					return markup
						.resize()
						.keyboard([markup.contactRequestButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ‚úÖ')])
						.oneTime()
						.resize();
				})
			);
			return { nextScene: SCENES.START, nextStep: STEPS.SECOND };
		} else if (!user.phone && !deeplink) {
			ctx.replyWithVideo(`https://i.imgur.com/0ArgQXc.mp4`, {
				caption:
					'–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç–µ —Å–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å!\n\n–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —É –Ω–∏—Ö –Ω–µ—Ç Automobot - —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –Ω–µ–º!\n\nC —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ Automobot.net',
			});
		} else {
			ctx.reply(
				'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
				Markup.keyboard([['‚≠êÔ∏è –ú–æ–∏ –∞–≤—Ç–æ']])
					.resize()
					.extra()
			);
		}
		return { nextScene: SCENES.MENU, nextStep: STEPS.FIRST };
	},
	[STEPS.SECOND]: async function ({ ctx, user }) {
		const phone = ctx.message ? (ctx.message.contact ? ctx.message.contact.phone_number : null) : null;
		if (!phone) {
			ctx.reply(
				'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–æ–º–µ—Ä–∞',
				Extra.markup((markup) => {
					return markup
						.resize()
						.keyboard([markup.contactRequestButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ‚úÖ')])
						.oneTime()
						.resize();
				})
			);
			return { nextScene: SCENES.START, nextStep: STEPS.SECOND };
		} else {
			user.phone = phone;
			let nextScene = { nextScene: SCENES.START, nextStep: STEPS.THIRD };
			//create user on backend
			await fetch(`${process.env.BACKEND_URL}/customers/add`, {
				method: 'post',
				body: JSON.stringify({
					phone: user.phone,
					customer_name: user.name,
					messenger: user.messenger,
					unique_id: user.chatId,
					company_hash: user.company_hash,
					mess_login: user.username,
				}),
				headers: { 'Content-Type': 'application/json' },
			})
				.then((res) => res.json())
				.then(async (data) => {
					if (data.hash) {
						const buttonUrl = `${process.env.SITE_URL}/driver-registration/?id=${data.hash}`;
						ctx.reply(
							'–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –æ –≤–∞—à–µ–º –∞–≤—Ç–æ ‚¨áÔ∏è',
							Extra.markup(Markup.inlineKeyboard([Markup.urlButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ üåê', buttonUrl)]))
						);
					} else {
						await ctx.reply(`–†–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞, ${user.name}`);
						await ctx.reply(
							'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
							Markup.keyboard([['‚≠êÔ∏è –ú–æ–∏ –∞–≤—Ç–æ']])
								.resize()
								.extra()
						);
						return { nextScene: SCENES.MENU, nextStep: STEPS.FIRST };
					}
				})
				.catch((err) => {
					user.phone = null;
					ctx.reply(
						'–£–ø—Å, —Å–ª—É—á–∏–ª–∞—Å—å –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –º–æ–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å –Ω–∞—á–∞–ª–∞ üòÖ'
					);
					console.error(`Error at req: ${JSON.stringify(err)}`);
					nextScene = { nextScene: SCENES.START, nextStep: STEPS.FIRST };
				});
			return nextScene;
		}
	},
	[STEPS.THIRD]: async function ({ ctx, user }) {
		//do webhook
	},
};

module.exports = startScreen;
